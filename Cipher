def substitution_cipher(text, key):
    """
    Encrypts text using a substitution cipher based on the key length.
    The shift amount is determined by the length of the key.
    """
    result = ""
    shift = len(key)

    for char in text:
        if char.isalpha():
            # Determine the ASCII offset based on whether the character is uppercase or lowercase
            ascii_offset = ord('A') if char.isupper() else ord('a')

            # Apply the cipher: (position in alphabet + shift) % 26
            encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
            result += encrypted_char
        else:
            # Non-alphabetic characters remain unchanged
            result += char

    return result

def main():
    # Get input from user
    first_string = input("Enter first string: ")
    second_string = input("Enter second string: ")

    # Join the strings to form the phrase
    phrase = first_string + second_string

    # Get text to encrypt
    text_to_encrypt = input("Enter text to encrypt: ")

    # Encrypt the text using the phrase as the key
    encrypted_text = substitution_cipher(text_to_encrypt, phrase)

    print(f"\nOriginal phrase: {phrase}")
    print(f"Shift amount (based on phrase length): {len(phrase)}")
    print(f"Original text: {text_to_encrypt}")
    print(f"Encrypted text: {encrypted_text}")

    # Demonstrate decryption by creating a complementary key
    complementary_key = "x" * len(phrase)
    decrypted_text = substitution_cipher(encrypted_text, complementary_key)
    print(f"Decrypted text: {decrypted_text}")

if __name__ == "__main__":
    main()
